From 4d3ee7d62272000d38a84d5aa9e0bd7686a3aec0 Mon Sep 17 00:00:00 2001
From: Kirill Kapranov <kirill.kapranov@compulab.co.il>
Date: Thu, 5 Nov 2020 18:41:55 +0200
Subject: [PATCH 15/89] rtc:abx80x: Enable XT digital calibration

Signed-off-by: Kirill Kapranov <kirill.kapranov@compulab.co.il>
---
 drivers/rtc/rtc-abx80x.c | 232 +++++++++++++++++++++++++++++++--------
 1 file changed, 188 insertions(+), 44 deletions(-)

diff --git a/drivers/rtc/rtc-abx80x.c b/drivers/rtc/rtc-abx80x.c
index a48815be1bfa..b2f1cc7f0c0f 100644
--- a/drivers/rtc/rtc-abx80x.c
+++ b/drivers/rtc/rtc-abx80x.c
@@ -17,57 +17,64 @@
 #include <linux/rtc.h>
 #include <linux/watchdog.h>
 
-#define ABX8XX_REG_HTH		0x00
-#define ABX8XX_REG_SC		0x01
-#define ABX8XX_REG_MN		0x02
-#define ABX8XX_REG_HR		0x03
-#define ABX8XX_REG_DA		0x04
-#define ABX8XX_REG_MO		0x05
-#define ABX8XX_REG_YR		0x06
-#define ABX8XX_REG_WD		0x07
-
-#define ABX8XX_REG_AHTH		0x08
-#define ABX8XX_REG_ASC		0x09
-#define ABX8XX_REG_AMN		0x0a
-#define ABX8XX_REG_AHR		0x0b
-#define ABX8XX_REG_ADA		0x0c
-#define ABX8XX_REG_AMO		0x0d
-#define ABX8XX_REG_AWD		0x0e
-
-#define ABX8XX_REG_STATUS	0x0f
-#define ABX8XX_STATUS_AF	BIT(2)
-#define ABX8XX_STATUS_BLF	BIT(4)
-#define ABX8XX_STATUS_WDT	BIT(6)
-
-#define ABX8XX_REG_CTRL1	0x10
-#define ABX8XX_CTRL_WRITE	BIT(0)
-#define ABX8XX_CTRL_ARST	BIT(2)
-#define ABX8XX_CTRL_12_24	BIT(6)
-
-#define ABX8XX_REG_CTRL2	0x11
-#define ABX8XX_CTRL2_RSVD	BIT(5)
-
-#define ABX8XX_REG_IRQ		0x12
-#define ABX8XX_IRQ_AIE		BIT(2)
-#define ABX8XX_IRQ_IM_1_4	(0x3 << 5)
+#define ABX8XX_REG_HTH			0x00
+#define ABX8XX_REG_SC			0x01
+#define ABX8XX_REG_MN			0x02
+#define ABX8XX_REG_HR			0x03
+#define ABX8XX_REG_DA			0x04
+#define ABX8XX_REG_MO			0x05
+#define ABX8XX_REG_YR			0x06
+#define ABX8XX_REG_WD			0x07
+
+#define ABX8XX_REG_AHTH			0x08
+#define ABX8XX_REG_ASC			0x09
+#define ABX8XX_REG_AMN			0x0a
+#define ABX8XX_REG_AHR			0x0b
+#define ABX8XX_REG_ADA			0x0c
+#define ABX8XX_REG_AMO			0x0d
+#define ABX8XX_REG_AWD			0x0e
+
+#define ABX8XX_REG_STATUS		0x0f
+#define ABX8XX_STATUS_AF		BIT(2)
+#define ABX8XX_STATUS_BLF		BIT(4)
+#define ABX8XX_STATUS_WDT		BIT(6)
+
+#define ABX8XX_REG_CTRL1		0x10
+#define ABX8XX_CTRL_WRITE		BIT(0)
+#define ABX8XX_CTRL_ARST		BIT(2)
+#define ABX8XX_CTRL_12_24		BIT(6)
+
+#define ABX8XX_REG_CTRL2		0x11
+#define ABX8XX_CTRL2_RSVD		BIT(5)
+
+#define ABX8XX_REG_IRQ			0x12
+#define ABX8XX_IRQ_AIE			BIT(2)
+#define ABX8XX_IRQ_IM_1_4		(0x3 << 5)
 
 #define ABX8XX_REG_SQW	 		0x13
 #define ABX8XX_REG_SQW_MODE_BITS	5
 #define ABX8XX_REG_SQW_EN		BIT(7)
 
-#define ABX8XX_REG_CD_TIMER_CTL	0x18
+#define ABX8XX_REG_CAL_XT		0x14
+#define ABX8XX_REG_CAL_XT_CMDX_SHIFT	7
+#define ABX8XX_REG_CAL_XT_OFFSETX_MASK	((1 << (ABX8XX_REG_CAL_XT_CMDX_SHIFT)) - 1)
 
-#define ABX8XX_REG_OSC		0x1c
-#define ABX8XX_OSC_FOS		BIT(3)
-#define ABX8XX_OSC_BOS		BIT(4)
-#define ABX8XX_OSC_ACAL_512	BIT(5)
-#define ABX8XX_OSC_ACAL_1024	BIT(6)
+#define ABX8XX_REG_CD_TIMER_CTL		0x18
 
-#define ABX8XX_OSC_OSEL		BIT(7)
+#define ABX8XX_REG_OSC			0x1c
+#define ABX8XX_OSC_FOS			BIT(3)
+#define ABX8XX_OSC_BOS			BIT(4)
+#define ABX8XX_OSC_ACAL_512		BIT(5)
+#define ABX8XX_OSC_ACAL_1024		BIT(6)
+
+#define ABX8XX_OSC_OSEL			BIT(7)
+
+#define ABX8XX_REG_OSS			0x1d
+#define ABX8XX_OSS_OF			BIT(1)
+#define ABX8XX_OSS_OMODE		BIT(4)
+#define ABX8XX_REG_OSS_XTCAL_SHIFT	6
+#define ABX8XX_REG_OSS_XTCAL_MASK	((1 << (ABX8XX_REG_OSS_XTCAL_SHIFT)) - 1)
 
-#define ABX8XX_REG_OSS		0x1d
-#define ABX8XX_OSS_OF		BIT(1)
-#define ABX8XX_OSS_OMODE	BIT(4)
 
 #define ABX8XX_REG_WDT		0x1b
 #define ABX8XX_WDT_WDS		BIT(7)
@@ -100,6 +107,7 @@ struct abx80x_cap {
 	u16 pn;
 	bool has_tc;
 	bool has_wdog;
+	bool has_atk; /* Has advanced timekeeping */
 };
 
 static struct abx80x_cap abx80x_caps[] = {
@@ -110,7 +118,7 @@ static struct abx80x_cap abx80x_caps[] = {
 	[AB1801] = {.pn = 0x1801},
 	[AB1803] = {.pn = 0x1803},
 	[AB1804] = {.pn = 0x1804, .has_tc = true, .has_wdog = true},
-	[AB1805] = {.pn = 0x1805, .has_tc = true, .has_wdog = true},
+	[AB1805] = {.pn = 0x1805, .has_tc = true, .has_wdog = true, .has_atk = true},
 	[RV1805] = {.pn = 0x1805, .has_tc = true, .has_wdog = true},
 	[ABX80X] = {.pn = 0}
 };
@@ -490,6 +498,132 @@ static ssize_t oscillator_show(struct device *dev,
 
 static DEVICE_ATTR_RW(oscillator);
 
+static int const xt_freq_std = 32768000;
+
+static int xt_calibration_set(struct i2c_client *client,
+				u32 xt_freq)
+{
+	int retval, flags;
+	u8 reg;
+
+	long Adj;
+	u8 XTCAL, CMDX, OFFSETX;
+
+	Adj = (xt_freq_std - (int)xt_freq) * 16 / 1000;
+	if (Adj < -320 ) {
+		dev_err(&client->dev, "The XT oscillator is too fast to be adjusted\n");
+		return -ERANGE;
+	}
+	else if(Adj < -256 ) {
+		XTCAL = 3;
+		CMDX = 1;
+		OFFSETX = (Adj + 192) / 2;
+	}
+	else if(Adj < -192 ) {
+		XTCAL = 3;
+		CMDX = 0;
+		OFFSETX = Adj + 192;
+	}
+	else if(Adj < -128 ) {
+		XTCAL = 2;
+		CMDX = 0;
+		OFFSETX = Adj + 128;
+	}
+	else if(Adj < -64 ) {
+		XTCAL = 1;
+		CMDX = 0;
+		OFFSETX = Adj + 64;
+	}
+	else if(Adj < 64 ) {
+		XTCAL = 0;
+		CMDX = 0;
+		OFFSETX = Adj;
+	}
+	else if(Adj < 128 ) {
+		XTCAL = 0;
+		CMDX = 1;
+		OFFSETX = Adj / 2;
+	}
+	else {
+		dev_err(&client->dev, "The XT oscillator is too slow to be adjusted\n");
+		return -ERANGE;
+	}
+
+	reg = ABX8XX_REG_OSS;
+	retval = i2c_smbus_read_byte_data(client, reg);
+	if (retval < 0)
+		goto err;
+
+	flags = retval & ABX8XX_REG_OSS_XTCAL_MASK;
+	flags |= XTCAL << ABX8XX_REG_OSS_XTCAL_SHIFT;
+
+	retval = i2c_smbus_write_byte_data(client, reg, flags);
+	if (retval < 0)
+		goto err;
+
+	OFFSETX &= ABX8XX_REG_CAL_XT_OFFSETX_MASK;
+	OFFSETX |= CMDX << ABX8XX_REG_CAL_XT_CMDX_SHIFT;
+
+	reg = ABX8XX_REG_CAL_XT;
+	retval = i2c_smbus_write_byte_data(client, reg, OFFSETX);
+	if (retval < 0)
+		goto err;
+
+	return 0;
+err:
+	dev_err(&client->dev, "Failed to access register %x\n", reg);
+	return retval;
+
+}
+
+static ssize_t xt_calibration_store(struct device *dev,
+				struct device_attribute *attr,
+				const char *buf, size_t count)
+{
+	int retval;
+	unsigned long xt_freq;
+
+	retval = kstrtoul(buf, 10, &xt_freq);
+	if (retval < 0) {
+		dev_err(dev, "Invalid value of oscillator frequency\n");
+		return -EINVAL;
+	}
+
+	dev_info(dev,"xt osc drift is %li ppm\n", \
+			1000000l * ((long)xt_freq - xt_freq_std) / xt_freq_std);
+
+	retval = xt_calibration_set(to_i2c_client(dev->parent), xt_freq);
+	if(retval)
+		return retval;
+	return count;
+}
+
+static ssize_t xt_calibration_show(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	struct i2c_client *client = to_i2c_client(dev->parent);
+	u8 XTCAL, CMDX, OFFSETX;
+	int flags;
+
+	flags = i2c_smbus_read_byte_data(client, ABX8XX_REG_OSS);
+	if (flags < 0)
+		goto err;
+	XTCAL = flags >> ABX8XX_REG_OSS_XTCAL_SHIFT;
+	flags = i2c_smbus_read_byte_data(client, ABX8XX_REG_CAL_XT);
+	if (flags < 0)
+		goto err;
+	OFFSETX = flags & ABX8XX_REG_CAL_XT_OFFSETX_MASK;
+	CMDX = flags >> ABX8XX_REG_CAL_XT_CMDX_SHIFT;
+
+	return sprintf(buf, "XTCAL %x\nCMDX %x\nOFFSETX %x\n", XTCAL, CMDX, OFFSETX);
+err:
+	dev_err(dev, "Failed to read calibration data\n");
+	return sprintf(buf, "\n");
+	return flags;
+}
+
+static DEVICE_ATTR_RW(xt_calibration);
+
 #define SQFS_COUNT (1 << ABX8XX_REG_SQW_MODE_BITS)
 static char const *const SQFS[SQFS_COUNT] = { "1_century", "32768_Hz", "8192_Hz", "4096_Hz",
 				"2048_Hz", "1024_Hz", "512_Hz", "256_Hz",
@@ -578,6 +712,7 @@ static struct attribute *rtc_calib_attrs[] = {
 	&dev_attr_autocalibration.attr,
 	&dev_attr_oscillator.attr,
 	&dev_attr_sqw.attr,
+	&dev_attr_xt_calibration.attr,
 	NULL,
 };
 
@@ -776,6 +911,7 @@ static int abx80x_probe(struct i2c_client *client,
 	unsigned int wafer;
 	unsigned int uid;
 	const char *sqw_mode_name;
+	unsigned int xt_freq;
 
 	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C))
 		return -ENODEV;
@@ -890,6 +1026,14 @@ static int abx80x_probe(struct i2c_client *client,
 		abx80x_enable_trickle_charger(client, trickle_cfg);
 	}
 
+	if (np && abx80x_caps[part].has_atk) {
+		if (!of_property_read_u32(np,"xt-frequency", &xt_freq)) {
+			dev_info(&client->dev, "Calibrate XT %d mHz:\n",
+			xt_freq);
+			xt_calibration_set(client, xt_freq);
+		}
+	}
+
 	if (!of_property_read_string(np, "sqw", &sqw_mode_name))
 		sqw_set(client, sqw_mode_name);
 
-- 
2.17.1

