From 9e4a517bdf843cf2d88bae57cb6c78c74230109e Mon Sep 17 00:00:00 2001
From: Kirill Kapranov <kirill.kapranov@compulab.co.il>
Date: Sun, 15 Jan 2023 22:59:11 +0200
Subject: [PATCH 42/89] snd: Fix resource management

Allocation of the memory and creating sysfs group shall be undone in
case of error. This prevents memory leak; also this rids system log of
unnecessary pollution caused by attempts of sysfs group recreation.

Signed-off-by: Kirill Kapranov <kirill.kapranov@compulab.co.il>
---
 sound/soc/fsl/fsl_sai.c     | 54 +++++++++++++++++++++++++------------
 sound/soc/fsl/imx-pcm-dma.c |  9 ++++---
 2 files changed, 43 insertions(+), 20 deletions(-)

diff --git a/sound/soc/fsl/fsl_sai.c b/sound/soc/fsl/fsl_sai.c
index 5cf671139324..ab99826a7332 100644
--- a/sound/soc/fsl/fsl_sai.c
+++ b/sound/soc/fsl/fsl_sai.c
@@ -1275,16 +1275,19 @@ static int fsl_sai_read_dlcfg(struct platform_device *pdev, char *pn,
 static int fsl_sai_probe(struct platform_device *pdev)
 {
 	struct device_node *np = pdev->dev.of_node;
-	struct fsl_sai *sai;
+	struct fsl_sai *sai = NULL;
 	struct regmap *gpr;
 	void __iomem *base;
 	char tmp[8];
 	int irq, ret, i;
 	int index;
+	bool sysfs_initialized = false;
 
 	sai = devm_kzalloc(&pdev->dev, sizeof(*sai), GFP_KERNEL);
-	if (!sai)
-		return -ENOMEM;
+	if (!sai) {
+		ret = -ENOMEM;
+		goto general_finish;
+	}
 
 	sai->pdev = pdev;
 	sai->soc_data = of_device_get_match_data(&pdev->dev);
@@ -1292,8 +1295,10 @@ static int fsl_sai_probe(struct platform_device *pdev)
 	sai->is_lsb_first = of_property_read_bool(np, "lsb-first");
 
 	base = devm_platform_get_and_ioremap_resource(pdev, 0, &sai->res);
-	if (IS_ERR(base))
-		return PTR_ERR(base);
+	if (IS_ERR(base)) {
+		ret = PTR_ERR(base);
+		goto err_mem_free;
+	}
 
 	if (sai->soc_data->reg_offset == 8) {
 		fsl_sai_regmap_config.reg_defaults = fsl_sai_reg_defaults_ofs8;
@@ -1305,7 +1310,8 @@ static int fsl_sai_probe(struct platform_device *pdev)
 	sai->regmap = devm_regmap_init_mmio(&pdev->dev, base, &fsl_sai_regmap_config);
 	if (IS_ERR(sai->regmap)) {
 		dev_err(&pdev->dev, "regmap init failed\n");
-		return PTR_ERR(sai->regmap);
+		ret = PTR_ERR(sai->regmap);
+		goto err_mem_free;
 	}
 
 	sai->bus_clk = devm_clk_get(&pdev->dev, "bus");
@@ -1316,7 +1322,8 @@ static int fsl_sai_probe(struct platform_device *pdev)
 		dev_err(&pdev->dev, "failed to get bus clock: %ld\n",
 				PTR_ERR(sai->bus_clk));
 		/* -EPROBE_DEFER */
-		return PTR_ERR(sai->bus_clk);
+		ret = PTR_ERR(sai->bus_clk);
+		goto err_mem_free;
 	}
 
 	for (i = 1; i < FSL_SAI_MCLK_MAX; i++) {
@@ -1349,14 +1356,14 @@ static int fsl_sai_probe(struct platform_device *pdev)
 	ret = fsl_sai_read_dlcfg(pdev, "fsl,dataline", &sai->pcm_dl_cfg,
 					sai->soc_data->dataline);
 	if (ret < 0)
-		return ret;
+		goto err_mem_free;
 
 	sai->pcm_dl_cfg_cnt = ret;
 
 	ret = fsl_sai_read_dlcfg(pdev, "fsl,dataline,dsd", &sai->dsd_dl_cfg,
 					sai->soc_data->dataline);
 	if (ret < 0)
-		return ret;
+		goto err_mem_free;
 
 	sai->dsd_dl_cfg_cnt = ret;
 
@@ -1375,14 +1382,16 @@ static int fsl_sai_probe(struct platform_device *pdev)
 	}
 
 	irq = platform_get_irq(pdev, 0);
-	if (irq < 0)
-		return irq;
+	if (irq < 0) {
+		ret = irq;
+		goto err_mem_free;
+	}
 
 	ret = devm_request_irq(&pdev->dev, irq, fsl_sai_isr, IRQF_SHARED,
 			       np->name, sai);
 	if (ret) {
 		dev_err(&pdev->dev, "failed to claim irq %u\n", irq);
-		return ret;
+		goto err_mem_free;
 	}
 
 	memcpy(&sai->cpu_dai_drv, &fsl_sai_dai_template,
@@ -1399,7 +1408,8 @@ static int fsl_sai_probe(struct platform_device *pdev)
 	    of_find_property(np, "fsl,sai-asynchronous", NULL)) {
 		/* error out if both synchronous and asynchronous are present */
 		dev_err(&pdev->dev, "invalid binding for synchronous mode\n");
-		return -EINVAL;
+		ret = -EINVAL;
+		goto err_mem_free;
 	}
 
 	if (of_find_property(np, "fsl,sai-synchronous-rx", NULL)) {
@@ -1420,12 +1430,15 @@ static int fsl_sai_probe(struct platform_device *pdev)
 		gpr = syscon_regmap_lookup_by_compatible("fsl,imx6ul-iomuxc-gpr");
 		if (IS_ERR(gpr)) {
 			dev_err(&pdev->dev, "cannot find iomuxc registers\n");
-			return PTR_ERR(gpr);
+			ret = PTR_ERR(gpr);
+			goto err_mem_free;
 		}
 
 		index = of_alias_get_id(np, "sai");
-		if (index < 0)
-			return index;
+		if (index < 0) {
+			ret = index;
+			goto err_mem_free;
+		}
 
 		regmap_update_bits(gpr, IOMUXC_GPR1, MCLK_DIR(index),
 				   MCLK_DIR(index));
@@ -1488,6 +1501,8 @@ static int fsl_sai_probe(struct platform_device *pdev)
 			dev_err(&pdev->dev, "fail to create sys group\n");
 			goto err_pm_get_sync;
 		}
+		else
+			sysfs_initialized = true;
 	}
 
 	/*
@@ -1509,7 +1524,7 @@ static int fsl_sai_probe(struct platform_device *pdev)
 	if (ret)
 		goto err_component_register;
 
-	return ret;
+	goto general_finish;
 
 err_component_register:
 	if (sai->verid.feature & FSL_SAI_VERID_TSTMP_EN)
@@ -1521,6 +1536,11 @@ static int fsl_sai_probe(struct platform_device *pdev)
 err_pm_disable:
 	pm_runtime_disable(&pdev->dev);
 
+	if(sysfs_initialized)
+		sysfs_remove_group(&pdev->dev.kobj, fsl_sai_get_dev_attribute_group(sai->monitor_spdif));
+err_mem_free:
+	devm_kfree(&pdev->dev, sai);
+general_finish:
 	return ret;
 }
 
diff --git a/sound/soc/fsl/imx-pcm-dma.c b/sound/soc/fsl/imx-pcm-dma.c
index 7ec48dfb1ee7..c83c76ddda6b 100644
--- a/sound/soc/fsl/imx-pcm-dma.c
+++ b/sound/soc/fsl/imx-pcm-dma.c
@@ -37,6 +37,7 @@ static const struct snd_dmaengine_pcm_config imx_dmaengine_pcm_config = {
 int imx_pcm_dma_init(struct platform_device *pdev, size_t size)
 {
 	struct snd_dmaengine_pcm_config *config;
+	int ret;
 
 	config = devm_kzalloc(&pdev->dev,
 			sizeof(struct snd_dmaengine_pcm_config), GFP_KERNEL);
@@ -47,9 +48,11 @@ int imx_pcm_dma_init(struct platform_device *pdev, size_t size)
 	if (size)
 		config->prealloc_buffer_size = size;
 
-	return devm_snd_dmaengine_pcm_register(&pdev->dev,
-		config,
-		SND_DMAENGINE_PCM_FLAG_COMPAT);
+	ret = devm_snd_dmaengine_pcm_register(&pdev->dev, config,
+			SND_DMAENGINE_PCM_FLAG_COMPAT);
+	if(ret)
+		devm_kfree(&pdev->dev, config);
+	return ret;
 }
 EXPORT_SYMBOL_GPL(imx_pcm_dma_init);
 
-- 
2.17.1

