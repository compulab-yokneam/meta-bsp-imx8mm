From a31f476b6d1cea184bcace9a51540af1f7fae871 Mon Sep 17 00:00:00 2001
From: Kirill Kapranov <kirill.kapranov@compulab.co.il>
Date: Sun, 15 Jan 2023 22:45:09 +0200
Subject: [PATCH 36/89] ucm: Enable display kd050hdfia020 with touchscreen

Signed-off-by: Kirill Kapranov <kirill.kapranov@compulab.co.il>
---
 .../boot/dts/compulab/sb-ucm-imx8-rev2.dtsi   |  26 +
 .../boot/dts/compulab/ucm-imx8m-mini.dtsi     |  37 +
 drivers/gpu/drm/panel/Kconfig                 |   9 +
 drivers/gpu/drm/panel/Makefile                |   1 +
 .../gpu/drm/panel/panel-startek-ili9881c.c    | 648 ++++++++++++++++++
 5 files changed, 721 insertions(+)
 create mode 100644 drivers/gpu/drm/panel/panel-startek-ili9881c.c

diff --git a/arch/arm64/boot/dts/compulab/sb-ucm-imx8-rev2.dtsi b/arch/arm64/boot/dts/compulab/sb-ucm-imx8-rev2.dtsi
index 1bf30f845cbc..045aa9df5f32 100644
--- a/arch/arm64/boot/dts/compulab/sb-ucm-imx8-rev2.dtsi
+++ b/arch/arm64/boot/dts/compulab/sb-ucm-imx8-rev2.dtsi
@@ -69,5 +69,31 @@
 	pinctrl-names = "default";
 	pinctrl-0 = <&pinctrl_i2c4>;
 	status = "okay";
+
+	goodix_ts@5d {
+		compatible = "goodix,gt911";
+		reg = <0x5d>;
+
+		interrupt-parent = <&gpio1>;
+		interrupts = <1 IRQ_TYPE_LEVEL_HIGH>;
+
+		pinctrl-names = "default";
+		pinctrl-0 = <&touchscreen_pins>;
+
+		irq-gpios = <&gpio1 1 GPIO_ACTIVE_HIGH>;
+		reset-gpios = <&pca9555 4 GPIO_ACTIVE_HIGH>;
+		status = "okay";
+	};
 };
 
+&mipi_dsi {
+	status = "okay";
+	panel: panel@0 {
+		compatible = "startek,kd050hdfia020";
+		reg = <0>;
+		reset-gpio = <&pca9555 6 GPIO_ACTIVE_LOW>;
+		dsi-lanes = <4>;
+		status = "okay";
+
+	};
+};
diff --git a/arch/arm64/boot/dts/compulab/ucm-imx8m-mini.dtsi b/arch/arm64/boot/dts/compulab/ucm-imx8m-mini.dtsi
index aff5d206dc70..a596f87bbefb 100644
--- a/arch/arm64/boot/dts/compulab/ucm-imx8m-mini.dtsi
+++ b/arch/arm64/boot/dts/compulab/ucm-imx8m-mini.dtsi
@@ -94,6 +94,29 @@
 		#reset-cells = <0>;
 	};
 
+	backlight {
+		compatible = "pwm-backlight";
+		pwms = <&pwm2 0 3000000 0>;
+
+		brightness-levels = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
+					17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32
+					33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48
+					49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64
+					65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80
+					81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96
+					97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112
+					113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128
+					129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144
+					145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160
+					161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176
+					177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192
+					193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208
+					209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224
+					225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240
+					241 242 243 244 245 246 247 248 249 250 251 252 253 254 255>;
+		default-brightness-level = <222>;
+		status = "okay";
+	};
 };
 
 &iomuxc {
@@ -674,6 +697,10 @@
 	arm-supply = <&buck2_reg>;
 };
 
+&gpu {
+	status = "okay";
+};
+
 &usbotg1 {
 	dr_mode = "otg";
 	hnp-disable;
@@ -690,6 +717,16 @@
 	status = "okay";
 };
 
+&lcdif {
+	status = "okay";
+};
+
+&pwm2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_pwm_backlight>;
+	status = "okay";
+};
+
 &cpu_alert0 {
 	temperature = <105000>;
 };
diff --git a/drivers/gpu/drm/panel/Kconfig b/drivers/gpu/drm/panel/Kconfig
index 5663037fff13..b082603edda6 100644
--- a/drivers/gpu/drm/panel/Kconfig
+++ b/drivers/gpu/drm/panel/Kconfig
@@ -157,6 +157,15 @@ config DRM_PANEL_INNOLUX_EJ030NA
           320x480 3.0" panel as found in the RS97 V2.1, RG300(non-ips)
           and LDK handheld gaming consoles.
 
+config DRM_PANEL_STARTEK_ILI9881C
+	tristate "Startek ILI9881C-based panels"
+	depends on OF
+	depends on DRM_MIPI_DSI
+	depends on BACKLIGHT_CLASS_DEVICE
+	help
+	  Say Y if you want to enable support for panels based on the
+	  Startek ILI9881c controller.
+
 config DRM_PANEL_INNOLUX_P079ZCA
 	tristate "Innolux P079ZCA panel"
 	depends on OF
diff --git a/drivers/gpu/drm/panel/Makefile b/drivers/gpu/drm/panel/Makefile
index 5315883da4b5..575a033bc4f2 100644
--- a/drivers/gpu/drm/panel/Makefile
+++ b/drivers/gpu/drm/panel/Makefile
@@ -57,6 +57,7 @@ obj-$(CONFIG_DRM_PANEL_SITRONIX_ST7703) += panel-sitronix-st7703.o
 obj-$(CONFIG_DRM_PANEL_SITRONIX_ST7789V) += panel-sitronix-st7789v.o
 obj-$(CONFIG_DRM_PANEL_SONY_ACX424AKP) += panel-sony-acx424akp.o
 obj-$(CONFIG_DRM_PANEL_SONY_ACX565AKM) += panel-sony-acx565akm.o
+obj-$(CONFIG_DRM_PANEL_STARTEK_ILI9881C) += panel-startek-ili9881c.o
 obj-$(CONFIG_DRM_PANEL_TDO_TL070WSH30) += panel-tdo-tl070wsh30.o
 obj-$(CONFIG_DRM_PANEL_TPO_TD028TTEC1) += panel-tpo-td028ttec1.o
 obj-$(CONFIG_DRM_PANEL_TPO_TD043MTEA1) += panel-tpo-td043mtea1.o
diff --git a/drivers/gpu/drm/panel/panel-startek-ili9881c.c b/drivers/gpu/drm/panel/panel-startek-ili9881c.c
new file mode 100644
index 000000000000..f832d055be4e
--- /dev/null
+++ b/drivers/gpu/drm/panel/panel-startek-ili9881c.c
@@ -0,0 +1,648 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (C) 2019, CompuLab LTD.
+ */
+
+#include <linux/backlight.h>
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/err.h>
+#include <linux/errno.h>
+#include <linux/fb.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+
+#include <linux/gpio/consumer.h>
+#include <linux/regulator/consumer.h>
+
+#include <drm/drmP.h>
+#include <drm/drm_crtc.h>
+#include <drm/drm_mipi_dsi.h>
+#include <drm/drm_modes.h>
+#include <drm/drm_panel.h>
+
+#include <linux/of_device.h>
+#include <linux/of_gpio.h>
+
+#include <video/mipi_display.h>
+
+#define   LCD_XSIZE_TFT   720
+#define   LCD_YSIZE_TFT   1280
+#define   PCLOCK          62000
+#define   LCD_VBPD        20
+#define   LCD_VFPD        10
+#define   LCD_VSPW        10
+#define   LCD_HBPD        30
+#define   LCD_HFPD        10
+#define   LCD_HSPW        20
+
+struct ili9881c {
+    struct drm_panel	panel;
+    struct mipi_dsi_device	*dsi;
+
+    struct backlight_device *backlight;
+    struct regulator	*power;
+    int rst_gpio;
+
+    bool prepared;
+    bool enabled;
+};
+
+enum ili9881c_op {
+    ILI9881C_SWITCH_PAGE,
+    ILI9881C_COMMAND,
+};
+
+struct ili9881c_instr {
+    enum ili9881c_op	op;
+
+    union arg {
+        struct cmd {
+            u8	cmd;
+            u8	data;
+        } cmd;
+        u8	page;
+    } arg;
+};
+
+#define ILI9881C_SWITCH_PAGE_INSTR(_page)	\
+    {					\
+        .op = ILI9881C_SWITCH_PAGE,	\
+        .arg = {			\
+            .page = (_page),	\
+        },				\
+    }
+
+#define ILI9881C_COMMAND_INSTR(_cmd, _data)		\
+    {						\
+        .op = ILI9881C_COMMAND,		\
+        .arg = {				\
+            .cmd = {			\
+                .cmd = (_cmd),		\
+                .data = (_data),	\
+            },				\
+        },					\
+    }
+
+static const struct ili9881c_instr ili9881c_init[] = {
+    ILI9881C_SWITCH_PAGE_INSTR(3),
+    ILI9881C_COMMAND_INSTR(0x01, 0x00),
+    ILI9881C_COMMAND_INSTR(0x02, 0x00),
+    ILI9881C_COMMAND_INSTR(0x03, 0x72),
+    ILI9881C_COMMAND_INSTR(0x04, 0x00),
+    ILI9881C_COMMAND_INSTR(0x05, 0x00),
+    ILI9881C_COMMAND_INSTR(0x06, 0x09),
+    ILI9881C_COMMAND_INSTR(0x07, 0x00),
+    ILI9881C_COMMAND_INSTR(0x08, 0x00),
+    ILI9881C_COMMAND_INSTR(0x09, 0x01),
+    ILI9881C_COMMAND_INSTR(0x0a, 0x00),
+    ILI9881C_COMMAND_INSTR(0x0b, 0x00),
+    ILI9881C_COMMAND_INSTR(0x0c, 0x01),
+    ILI9881C_COMMAND_INSTR(0x0d, 0x00),
+    ILI9881C_COMMAND_INSTR(0x0e, 0x00),
+    ILI9881C_COMMAND_INSTR(0x0f, 0x00),
+    ILI9881C_COMMAND_INSTR(0x10, 0x00),
+    ILI9881C_COMMAND_INSTR(0x11, 0x00),
+    ILI9881C_COMMAND_INSTR(0x12, 0x00),
+    ILI9881C_COMMAND_INSTR(0x13, 0x00),
+    ILI9881C_COMMAND_INSTR(0x14, 0x00),
+    ILI9881C_COMMAND_INSTR(0x15, 0x00),
+    ILI9881C_COMMAND_INSTR(0x16, 0x00),
+    ILI9881C_COMMAND_INSTR(0x17, 0x00),
+    ILI9881C_COMMAND_INSTR(0x18, 0x00),
+    ILI9881C_COMMAND_INSTR(0x19, 0x00),
+    ILI9881C_COMMAND_INSTR(0x1a, 0x00),
+    ILI9881C_COMMAND_INSTR(0x1b, 0x00),
+    ILI9881C_COMMAND_INSTR(0x1c, 0x00),
+    ILI9881C_COMMAND_INSTR(0x1d, 0x00),
+    ILI9881C_COMMAND_INSTR(0x1e, 0x40),
+    ILI9881C_COMMAND_INSTR(0x1f, 0x80),
+    ILI9881C_COMMAND_INSTR(0x20, 0x05),
+    ILI9881C_COMMAND_INSTR(0x20, 0x05),
+    ILI9881C_COMMAND_INSTR(0x21, 0x02),
+    ILI9881C_COMMAND_INSTR(0x22, 0x00),
+    ILI9881C_COMMAND_INSTR(0x23, 0x00),
+    ILI9881C_COMMAND_INSTR(0x24, 0x00),
+    ILI9881C_COMMAND_INSTR(0x25, 0x00),
+    ILI9881C_COMMAND_INSTR(0x26, 0x00),
+    ILI9881C_COMMAND_INSTR(0x27, 0x00),
+    ILI9881C_COMMAND_INSTR(0x28, 0x33),
+    ILI9881C_COMMAND_INSTR(0x29, 0x02),
+    ILI9881C_COMMAND_INSTR(0x2a, 0x00),
+    ILI9881C_COMMAND_INSTR(0x2b, 0x00),
+    ILI9881C_COMMAND_INSTR(0x2c, 0x00),
+    ILI9881C_COMMAND_INSTR(0x2d, 0x00),
+    ILI9881C_COMMAND_INSTR(0x2e, 0x00),
+    ILI9881C_COMMAND_INSTR(0x2f, 0x00),
+    ILI9881C_COMMAND_INSTR(0x30, 0x00),
+    ILI9881C_COMMAND_INSTR(0x31, 0x00),
+    ILI9881C_COMMAND_INSTR(0x32, 0x00),
+    ILI9881C_COMMAND_INSTR(0x32, 0x00),
+    ILI9881C_COMMAND_INSTR(0x33, 0x00),
+    ILI9881C_COMMAND_INSTR(0x34, 0x04),
+    ILI9881C_COMMAND_INSTR(0x35, 0x00),
+    ILI9881C_COMMAND_INSTR(0x36, 0x00),
+    ILI9881C_COMMAND_INSTR(0x37, 0x00),
+    ILI9881C_COMMAND_INSTR(0x38, 0x3C),
+    ILI9881C_COMMAND_INSTR(0x39, 0x00),
+    ILI9881C_COMMAND_INSTR(0x3a, 0x40),
+    ILI9881C_COMMAND_INSTR(0x3b, 0x40),
+    ILI9881C_COMMAND_INSTR(0x3c, 0x00),
+    ILI9881C_COMMAND_INSTR(0x3d, 0x00),
+    ILI9881C_COMMAND_INSTR(0x3e, 0x00),
+    ILI9881C_COMMAND_INSTR(0x3f, 0x00),
+    ILI9881C_COMMAND_INSTR(0x40, 0x00),
+    ILI9881C_COMMAND_INSTR(0x41, 0x00),
+    ILI9881C_COMMAND_INSTR(0x42, 0x00),
+    ILI9881C_COMMAND_INSTR(0x43, 0x00),
+    ILI9881C_COMMAND_INSTR(0x44, 0x00),
+    ILI9881C_COMMAND_INSTR(0x50, 0x01),
+    ILI9881C_COMMAND_INSTR(0x51, 0x23),
+    ILI9881C_COMMAND_INSTR(0x52, 0x45),
+    ILI9881C_COMMAND_INSTR(0x53, 0x67),
+    ILI9881C_COMMAND_INSTR(0x54, 0x89),
+    ILI9881C_COMMAND_INSTR(0x55, 0xab),
+    ILI9881C_COMMAND_INSTR(0x56, 0x01),
+    ILI9881C_COMMAND_INSTR(0x57, 0x23),
+    ILI9881C_COMMAND_INSTR(0x58, 0x45),
+    ILI9881C_COMMAND_INSTR(0x59, 0x67),
+    ILI9881C_COMMAND_INSTR(0x5a, 0x89),
+    ILI9881C_COMMAND_INSTR(0x5b, 0xab),
+    ILI9881C_COMMAND_INSTR(0x5c, 0xcd),
+    ILI9881C_COMMAND_INSTR(0x5d, 0xef),
+    ILI9881C_COMMAND_INSTR(0x5e, 0x11),
+    ILI9881C_COMMAND_INSTR(0x5f, 0x01),
+    ILI9881C_COMMAND_INSTR(0x60, 0x00),
+    ILI9881C_COMMAND_INSTR(0x61, 0x15),
+    ILI9881C_COMMAND_INSTR(0x62, 0x14),
+    ILI9881C_COMMAND_INSTR(0x63, 0x0E),
+    ILI9881C_COMMAND_INSTR(0x64, 0x0F),
+    ILI9881C_COMMAND_INSTR(0x65, 0x0C),
+    ILI9881C_COMMAND_INSTR(0x66, 0x0D),
+    ILI9881C_COMMAND_INSTR(0x67, 0x06),
+    ILI9881C_COMMAND_INSTR(0x68, 0x02),
+    ILI9881C_COMMAND_INSTR(0x69, 0x07),
+    ILI9881C_COMMAND_INSTR(0x6a, 0x02),
+    ILI9881C_COMMAND_INSTR(0x6b, 0x02),
+    ILI9881C_COMMAND_INSTR(0x6c, 0x02),
+    ILI9881C_COMMAND_INSTR(0x6d, 0x02),
+    ILI9881C_COMMAND_INSTR(0x6e, 0x02),
+    ILI9881C_COMMAND_INSTR(0x6f, 0x02),
+    ILI9881C_COMMAND_INSTR(0x70, 0x02),
+    ILI9881C_COMMAND_INSTR(0x71, 0x02),
+    ILI9881C_COMMAND_INSTR(0x72, 0x02),
+    ILI9881C_COMMAND_INSTR(0x73, 0x02),
+    ILI9881C_COMMAND_INSTR(0x74, 0x02),
+    ILI9881C_COMMAND_INSTR(0x75, 0x01),
+    ILI9881C_COMMAND_INSTR(0x76, 0x00),
+    ILI9881C_COMMAND_INSTR(0x77, 0x14),
+    ILI9881C_COMMAND_INSTR(0x78, 0x15),
+    ILI9881C_COMMAND_INSTR(0x79, 0x0E),
+    ILI9881C_COMMAND_INSTR(0x7a, 0x0F),
+    ILI9881C_COMMAND_INSTR(0x7b, 0x0C),
+    ILI9881C_COMMAND_INSTR(0x7c, 0x0D),
+    ILI9881C_COMMAND_INSTR(0x7d, 0x06),
+    ILI9881C_COMMAND_INSTR(0x7e, 0x02),
+    ILI9881C_COMMAND_INSTR(0x7f, 0x07),
+    ILI9881C_COMMAND_INSTR(0x80, 0x02),
+    ILI9881C_COMMAND_INSTR(0x81, 0x02),
+    ILI9881C_COMMAND_INSTR(0x83, 0x02),
+    ILI9881C_COMMAND_INSTR(0x84, 0x02),
+    ILI9881C_COMMAND_INSTR(0x85, 0x02),
+    ILI9881C_COMMAND_INSTR(0x86, 0x02),
+    ILI9881C_COMMAND_INSTR(0x87, 0x02),
+    ILI9881C_COMMAND_INSTR(0x88, 0x02),
+    ILI9881C_COMMAND_INSTR(0x89, 0x02),
+    ILI9881C_COMMAND_INSTR(0x8A, 0x02),
+    ILI9881C_SWITCH_PAGE_INSTR(0x4),
+    ILI9881C_COMMAND_INSTR(0x6C, 0x15),
+    ILI9881C_COMMAND_INSTR(0x6E, 0x2A),
+    ILI9881C_COMMAND_INSTR(0x6F, 0x33),
+    ILI9881C_COMMAND_INSTR(0x3A, 0x94),
+    ILI9881C_COMMAND_INSTR(0x8D, 0x15),
+    ILI9881C_COMMAND_INSTR(0x87, 0xBA),
+    ILI9881C_COMMAND_INSTR(0x26, 0x76),
+    ILI9881C_COMMAND_INSTR(0xB2, 0xD1),
+    ILI9881C_COMMAND_INSTR(0xB5, 0x06),
+    ILI9881C_SWITCH_PAGE_INSTR(0x1),
+    ILI9881C_COMMAND_INSTR(0x22, 0x0A),
+    ILI9881C_COMMAND_INSTR(0x31, 0x00),
+    ILI9881C_COMMAND_INSTR(0x53, 0x90),
+    ILI9881C_COMMAND_INSTR(0x55, 0xA2),
+    ILI9881C_COMMAND_INSTR(0x50, 0xB7),
+    ILI9881C_COMMAND_INSTR(0x51, 0xB7),
+    ILI9881C_COMMAND_INSTR(0x60, 0x22),
+    ILI9881C_COMMAND_INSTR(0x61, 0x00),
+    ILI9881C_COMMAND_INSTR(0x62, 0x19),
+    ILI9881C_COMMAND_INSTR(0x63, 0x10),
+    ILI9881C_COMMAND_INSTR(0xA0, 0x08),
+    ILI9881C_COMMAND_INSTR(0xA1, 0x1A),
+    ILI9881C_COMMAND_INSTR(0xA2, 0x27),
+    ILI9881C_COMMAND_INSTR(0xA3, 0x15),
+    ILI9881C_COMMAND_INSTR(0xA4, 0x17),
+    ILI9881C_COMMAND_INSTR(0xA5, 0x2A),
+    ILI9881C_COMMAND_INSTR(0xA6, 0x1E),
+    ILI9881C_COMMAND_INSTR(0xA7, 0x1F),
+    ILI9881C_COMMAND_INSTR(0xA8, 0x8B),
+    ILI9881C_COMMAND_INSTR(0xA9, 0x1B),
+    ILI9881C_COMMAND_INSTR(0xAA, 0x27),
+    ILI9881C_COMMAND_INSTR(0xAB, 0x78),
+    ILI9881C_COMMAND_INSTR(0xAC, 0x18),
+    ILI9881C_COMMAND_INSTR(0xAD, 0x18),
+    ILI9881C_COMMAND_INSTR(0xAE, 0x4C),
+    ILI9881C_COMMAND_INSTR(0xAF, 0x21),
+    ILI9881C_COMMAND_INSTR(0xB0, 0x27),
+    ILI9881C_COMMAND_INSTR(0xB1, 0x54),
+    ILI9881C_COMMAND_INSTR(0xB2, 0x67),
+    ILI9881C_COMMAND_INSTR(0xB3, 0x39),
+    ILI9881C_COMMAND_INSTR(0xC0, 0x08),
+    ILI9881C_COMMAND_INSTR(0xC1, 0x1A),
+    ILI9881C_COMMAND_INSTR(0xC2, 0x27),
+    ILI9881C_COMMAND_INSTR(0xC3, 0x15),
+    ILI9881C_COMMAND_INSTR(0xC4, 0x17),
+    ILI9881C_COMMAND_INSTR(0xC5, 0x2A),
+    ILI9881C_COMMAND_INSTR(0xC6, 0x1E),
+    ILI9881C_COMMAND_INSTR(0xC7, 0x1F),
+    ILI9881C_COMMAND_INSTR(0xC8, 0x8B),
+    ILI9881C_COMMAND_INSTR(0xC9, 0x1B),
+    ILI9881C_COMMAND_INSTR(0xCA, 0x27),
+    ILI9881C_COMMAND_INSTR(0xCB, 0x78),
+    ILI9881C_COMMAND_INSTR(0xCC, 0x18),
+    ILI9881C_COMMAND_INSTR(0xCD, 0x18),
+    ILI9881C_COMMAND_INSTR(0xCE, 0x4C),
+    ILI9881C_COMMAND_INSTR(0xCF, 0x21),
+    ILI9881C_COMMAND_INSTR(0xD0, 0x27),
+    ILI9881C_COMMAND_INSTR(0xD1, 0x54),
+    ILI9881C_COMMAND_INSTR(0xD2, 0x67),
+    ILI9881C_COMMAND_INSTR(0xD3, 0x39),
+    ILI9881C_SWITCH_PAGE_INSTR(0),
+    ILI9881C_COMMAND_INSTR(0x35, 0x00),
+    ILI9881C_COMMAND_INSTR(0x3A, 0x7),
+};
+
+static const u32 ili_bus_formats[] = {
+        MEDIA_BUS_FMT_RGB888_1X24,
+        MEDIA_BUS_FMT_RGB666_1X18,
+        MEDIA_BUS_FMT_RGB565_1X16,
+};
+
+static inline struct ili9881c *panel_to_ili9881c(struct drm_panel *panel)
+{
+    return container_of(panel, struct ili9881c, panel);
+}
+
+static int color_format_from_dsi_format(enum mipi_dsi_pixel_format format)
+{
+    switch (format) {
+    case MIPI_DSI_FMT_RGB565:
+        return 0x55;
+    case MIPI_DSI_FMT_RGB666:
+    case MIPI_DSI_FMT_RGB666_PACKED:
+        return 0x66;
+    case MIPI_DSI_FMT_RGB888:
+        return 0x7;
+    default:
+        return 0x77;
+    }
+};
+
+static int ili9881c_switch_page(struct ili9881c *ctx, u8 page)
+{
+    u8 buf[4] = { 0xff, 0x98, 0x81, page };
+    int ret;
+
+    ret = mipi_dsi_dcs_write_buffer(ctx->dsi, buf, sizeof(buf));
+    if (ret < 0) {
+        dev_err(&ctx->dsi->dev,"%s:%d failed %d\n", __func__, page, ret);
+        return ret;
+    }
+
+    return 0;
+}
+
+static int ili9881c_send_cmd_data(struct ili9881c *ctx, u8 cmd, u8 data)
+{
+	u8 buf[2] = { cmd, data };
+    int ret;
+
+    ret = mipi_dsi_dcs_write_buffer(ctx->dsi, buf, sizeof(buf));
+    if (ret < 0) {
+        dev_err(&ctx->dsi->dev,"%s:%d failed %d\n", __func__,cmd, ret);
+        return ret;
+    }
+    return 0;
+}
+
+static int ili9881c_enable(struct drm_panel *panel)
+{
+    unsigned int i;
+    int ret;
+    struct ili9881c *ctx = panel_to_ili9881c(panel);
+    struct mipi_dsi_device *dsi = ctx->dsi;
+    int color_format = color_format_from_dsi_format(dsi->format);
+
+    if (ctx->enabled)
+        return 0;
+
+    if (!ctx->prepared) {
+        dev_err(&ctx->dsi->dev, "Panel not prepared!\n");
+        return -EPERM;
+    }
+
+    dsi->mode_flags |= MIPI_DSI_MODE_LPM;
+
+    for (i = 0; i < ARRAY_SIZE(ili9881c_init); i++) {
+        const struct ili9881c_instr *instr = &ili9881c_init[i];
+
+        if (instr->op == ILI9881C_SWITCH_PAGE)
+            ret = ili9881c_switch_page(ctx, instr->arg.page);
+        else if (instr->op == ILI9881C_COMMAND)
+            ret = ili9881c_send_cmd_data(ctx, instr->arg.cmd.cmd,
+                              instr->arg.cmd.data);
+
+        if (ret) {
+            dev_err(&ctx->dsi->dev,"%s %d Failed command  # = [ %d ]; ret = [ %d ]\n",__func__,__LINE__,i,ret);
+            return ret;
+        }
+    }
+
+   /* The default value is 4-lane mode
+    * Issue if 2-lane required
+    */
+    if (ctx->dsi->lanes == 2) {
+        ret = ili9881c_switch_page(ctx, 1);
+        if (ret)
+            return ret;
+
+        ret = ili9881c_send_cmd_data(ctx, 0xB7, 0x03);
+        if (ret)
+            return ret;
+
+        ret = ili9881c_switch_page(ctx, 0);
+        if (ret)
+            return ret;
+    }
+
+    ret = mipi_dsi_dcs_set_tear_on(ctx->dsi, MIPI_DSI_DCS_TEAR_MODE_VBLANK);
+    if (ret)
+        return ret;
+
+    /* Set tear scanline */
+    ret = mipi_dsi_dcs_set_tear_scanline(dsi, 0x380);
+    if (ret < 0) {
+        dev_err(&ctx->dsi->dev, "Failed to set tear scanline (%d)\n", ret);
+        return ret;
+    }
+
+    /* Set pixel format */
+    ret = mipi_dsi_dcs_set_pixel_format(dsi, color_format);
+    if (ret < 0) {
+        dev_err(&ctx->dsi->dev, "Failed to set pixel format (%d)\n", ret);
+        return ret;
+    }
+
+    ret = mipi_dsi_dcs_set_display_brightness(dsi, 0xffff);
+    if (ret < 0) {
+        dev_err(&ctx->dsi->dev, "Failed to set display brightness (%d)\n", ret);
+        return ret;
+    }
+
+    ret = mipi_dsi_dcs_exit_sleep_mode(ctx->dsi);
+    if (ret) {
+        dev_err(&ctx->dsi->dev, "Failed to exit sleep mode (%d)\n", ret);
+        return ret;
+    }
+    msleep(120);
+
+    ret = mipi_dsi_dcs_set_display_on(ctx->dsi);
+    if (ret) {
+        dev_err(&ctx->dsi->dev, "Failed to set display on (%d)\n", ret);
+        return ret;
+    }
+    msleep(20);
+
+    ctx->enabled = true;
+
+    dsi->mode_flags &= ~MIPI_DSI_MODE_LPM;
+
+	dev_notice(&ctx->dsi->dev,
+            "%s: Set %d-lane mode ; Color %d\n",__func__,
+            ctx->dsi->lanes,color_format);
+
+    return 0;
+}
+
+static int ili9881c_prepare(struct drm_panel *panel)
+{
+    struct ili9881c *ctx = panel_to_ili9881c(panel);
+    int ret;
+
+    if (ctx->prepared)
+        return 0;
+
+    /* Power the panel */
+    ret = regulator_enable(ctx->power);
+    if (ret)
+        return ret;
+
+    /* And reset it */
+    gpio_set_value_cansleep(ctx->rst_gpio, 0);
+    msleep(120);
+
+    gpio_set_value_cansleep(ctx->rst_gpio, 1);
+    msleep(120);
+
+    ctx->prepared = true;
+
+    return 0;
+}
+
+static int ili9881c_disable(struct drm_panel *panel)
+{
+    struct ili9881c *ctx = panel_to_ili9881c(panel);
+    int ret;
+
+    if (!ctx->enabled)
+        return 0;
+
+    /* backlight_disable(ctx->backlight); */
+    ret = mipi_dsi_dcs_enter_sleep_mode(ctx->dsi);
+    if (ret < 0) {
+        dev_err(&ctx->dsi->dev, "Failed to enter sleep mode (%d)\n", ret);
+        return ret;
+    }
+
+    ctx->enabled = false;
+
+    return 0;
+}
+
+static int ili9881c_unprepare(struct drm_panel *panel)
+{
+    struct ili9881c *ctx = panel_to_ili9881c(panel);
+
+    if (!ctx->prepared)
+        return 0;
+
+    if (ctx->enabled) {
+        dev_err(&ctx->dsi->dev, "Panel still enabled!\n");
+        return -EPERM;
+    }
+
+    mipi_dsi_dcs_enter_sleep_mode(ctx->dsi);
+    regulator_disable(ctx->power);
+    gpio_set_value_cansleep(ctx->rst_gpio, 0);
+
+    ctx->prepared = false;
+
+    return 0;
+}
+
+static const struct drm_display_mode bananapi_default_mode = {
+    .clock	= PCLOCK,
+    .vrefresh	= 60,
+
+    .hdisplay	= LCD_XSIZE_TFT,
+    .hsync_start= LCD_XSIZE_TFT + LCD_HFPD,
+    .hsync_end	= LCD_XSIZE_TFT + LCD_HFPD + LCD_HSPW,
+    .htotal	= LCD_XSIZE_TFT + LCD_HFPD + LCD_HSPW + LCD_HBPD,
+
+    .vdisplay	= LCD_YSIZE_TFT,
+    .vsync_start= LCD_YSIZE_TFT + LCD_VFPD,
+    .vsync_end	= LCD_YSIZE_TFT + LCD_VFPD + LCD_VSPW,
+    .vtotal	= LCD_YSIZE_TFT + LCD_VFPD + LCD_VSPW + LCD_VBPD,
+};
+
+static int ili9881c_get_modes(struct drm_panel *panel)
+{
+    struct drm_connector *connector = panel->connector;
+    struct ili9881c *ctx = panel_to_ili9881c(panel);
+    struct drm_display_mode *mode;
+    int ret;
+
+    mode = drm_mode_duplicate(panel->drm, &bananapi_default_mode);
+    if (!mode) {
+        dev_err(&ctx->dsi->dev, "failed to add mode %ux%ux@%u\n",
+            bananapi_default_mode.hdisplay,
+            bananapi_default_mode.vdisplay,
+            bananapi_default_mode.vrefresh);
+        return -ENOMEM;
+    }
+
+    drm_mode_set_name(mode);
+
+    panel->connector->display_info.width_mm = 62;
+    panel->connector->display_info.height_mm = 110;
+
+    dev_dbg(&ctx->dsi->dev, "calling bus format set function ili9881c\n");
+    connector->display_info.bus_flags = DRM_BUS_FLAG_DE_LOW | DRM_BUS_FLAG_PIXDATA_NEGEDGE;
+    ret = drm_display_info_set_bus_formats(&panel->connector->display_info,
+                    ili_bus_formats, ARRAY_SIZE(ili_bus_formats));
+    if (ret)
+        return -EINVAL;
+
+    mode->type = DRM_MODE_TYPE_DRIVER | DRM_MODE_TYPE_PREFERRED;
+    drm_mode_probed_add(connector, mode);
+
+    return 1;
+}
+
+static const struct drm_panel_funcs ili9881c_funcs = {
+    .prepare	= ili9881c_prepare,
+    .unprepare	= ili9881c_unprepare,
+    .enable	= ili9881c_enable,
+    .disable	= ili9881c_disable,
+    .get_modes	= ili9881c_get_modes,
+};
+
+static int ili9881c_dsi_probe(struct mipi_dsi_device *dsi)
+{
+    struct device_node *np;
+    struct ili9881c *ctx;
+    int ret;
+	int lanes = 4;
+
+    ctx = devm_kzalloc(&dsi->dev, sizeof(*ctx), GFP_KERNEL);
+    if (!ctx)
+        return -ENOMEM;
+    mipi_dsi_set_drvdata(dsi, ctx);
+    ctx->dsi = dsi;
+
+    drm_panel_init(&ctx->panel);
+    ctx->panel.dev = &dsi->dev;
+    ctx->panel.funcs = &ili9881c_funcs;
+
+    ctx->power = devm_regulator_get(&dsi->dev, "power");
+    if (IS_ERR(ctx->power)) {
+        dev_err(&dsi->dev, "Couldn't get our power regulator\n");
+        return PTR_ERR(ctx->power);
+    }
+
+    ctx->rst_gpio = of_get_named_gpio(dsi->dev.of_node, "reset-gpio", 0);
+    if (!gpio_is_valid(ctx->rst_gpio)) {
+        dev_err(&dsi->dev, "Couldn't get panel reset pin available 0\n");
+        return -EINVAL;
+    }
+
+    ret = devm_gpio_request_one(&dsi->dev, ctx->rst_gpio,
+                GPIOF_OUT_INIT_LOW, "ili_reset");
+
+    if (ret < 0) {
+        dev_err(&dsi->dev, "Couldn't get panel reset pin available 1\n");
+        return ret;
+    }
+
+    np = of_parse_phandle(dsi->dev.of_node, "backlight", 0);
+    if (np) {
+        ctx->backlight = of_find_backlight_by_node(np);
+        of_node_put(np);
+
+        if (!ctx->backlight)
+            return -EPROBE_DEFER;
+    }
+
+    of_property_read_u32(dsi->dev.of_node, "dsi-lanes", &lanes);
+    ret = drm_panel_add(&ctx->panel);
+    if (ret < 0)
+        return ret;
+
+    dsi->mode_flags = MIPI_DSI_MODE_VIDEO_SYNC_PULSE;
+    dsi->mode_flags |= MIPI_DSI_MODE_VIDEO;
+    dsi->format = MIPI_DSI_FMT_RGB888;
+    dsi->lanes = lanes;
+
+    return mipi_dsi_attach(dsi);
+}
+
+static int ili9881c_dsi_remove(struct mipi_dsi_device *dsi)
+{
+    struct ili9881c *ctx = mipi_dsi_get_drvdata(dsi);
+
+    mipi_dsi_detach(dsi);
+    drm_panel_remove(&ctx->panel);
+
+    if (ctx->backlight)
+        put_device(&ctx->backlight->dev);
+
+    return 0;
+}
+
+static const struct of_device_id ili9881c_of_match[] = {
+    { .compatible = "startek,kd050hdfia020" },
+    { }
+};
+MODULE_DEVICE_TABLE(of, ili9881c_of_match);
+
+static struct mipi_dsi_driver ili9881c_dsi_driver = {
+    .probe		= ili9881c_dsi_probe,
+    .remove		= ili9881c_dsi_remove,
+    .driver = {
+        .name		= "ili9881c-dsi",
+        .of_match_table	= ili9881c_of_match,
+    },
+};
+module_mipi_dsi_driver(ili9881c_dsi_driver);
+
+MODULE_AUTHOR("<CompuLab LTD> compulab@compulab.com>");
+MODULE_DESCRIPTION("Startek Panel Driver with Ilitek ILI9881C Controller");
+MODULE_LICENSE("GPL v2");
-- 
2.17.1

