From 55291b8849217851ef8f5f696763bfb12acbb4b5 Mon Sep 17 00:00:00 2001
From: Kirill Kapranov <kirill.kapranov@compulab.co.il>
Date: Thu, 26 Aug 2021 00:29:48 +0300
Subject: [PATCH 41/89] drm: Panel fix

Signed-off-by: Kirill Kapranov <kirill.kapranov@compulab.co.il>
---
 arch/arm64/configs/ucm-imx8m-mini_defconfig   |   2 +-
 .../gpu/drm/panel/panel-startek-ili9881c.c    | 145 +++++++++---------
 2 files changed, 71 insertions(+), 76 deletions(-)

diff --git a/arch/arm64/configs/ucm-imx8m-mini_defconfig b/arch/arm64/configs/ucm-imx8m-mini_defconfig
index 1e35a6009c13..5f75b54ca245 100644
--- a/arch/arm64/configs/ucm-imx8m-mini_defconfig
+++ b/arch/arm64/configs/ucm-imx8m-mini_defconfig
@@ -478,7 +478,7 @@ CONFIG_DRM_I2C_SIL164=m
 CONFIG_DRM_I2C_NXP_TDA998X=m
 CONFIG_DRM_MALI_DISPLAY=m
 CONFIG_DRM_PANEL_SIMPLE=y
-CONFIG_DRM_PANEL_ILITEK_ILI9881C=y
+CONFIG_DRM_PANEL_STARTEK_ILI9881C=y
 CONFIG_DRM_PANEL_SEIKO_43WVF1G=y
 CONFIG_DRM_FSL_IMX_LVDS_BRIDGE=y
 CONFIG_DRM_NWL_MIPI_DSI=y
diff --git a/drivers/gpu/drm/panel/panel-startek-ili9881c.c b/drivers/gpu/drm/panel/panel-startek-ili9881c.c
index f832d055be4e..f66a24e8f055 100644
--- a/drivers/gpu/drm/panel/panel-startek-ili9881c.c
+++ b/drivers/gpu/drm/panel/panel-startek-ili9881c.c
@@ -1,9 +1,8 @@
 // SPDX-License-Identifier: GPL-2.0
 /*
- * Copyright (C) 2019, CompuLab LTD.
+ * Copyright (C) 2021, CompuLab LTD.
  */
 
-#include <linux/backlight.h>
 #include <linux/delay.h>
 #include <linux/device.h>
 #include <linux/err.h>
@@ -15,16 +14,15 @@
 #include <linux/gpio/consumer.h>
 #include <linux/regulator/consumer.h>
 
-#include <drm/drmP.h>
-#include <drm/drm_crtc.h>
 #include <drm/drm_mipi_dsi.h>
 #include <drm/drm_modes.h>
 #include <drm/drm_panel.h>
 
 #include <linux/of_device.h>
-#include <linux/of_gpio.h>
 
 #include <video/mipi_display.h>
+#include <linux/media-bus-format.h>
+#include <drm/drm_connector.h>
 
 #define   LCD_XSIZE_TFT   720
 #define   LCD_YSIZE_TFT   1280
@@ -35,14 +33,17 @@
 #define   LCD_HBPD        30
 #define   LCD_HFPD        10
 #define   LCD_HSPW        20
+#define   SCREEN_HEIGHT   110
+#define   SCREEN_WIDTH    62
 
 struct ili9881c {
     struct drm_panel	panel;
     struct mipi_dsi_device	*dsi;
+    const struct ili9881c_desc	*desc;
 
     struct backlight_device *backlight;
     struct regulator	*power;
-    int rst_gpio;
+    struct gpio_desc	*reset;
 
     bool prepared;
     bool enabled;
@@ -65,6 +66,12 @@ struct ili9881c_instr {
     } arg;
 };
 
+struct ili9881c_desc {
+	const struct ili9881c_instr *init;
+	const size_t init_length;
+	const struct drm_display_mode *mode;
+};
+
 #define ILI9881C_SWITCH_PAGE_INSTR(_page)	\
     {					\
         .op = ILI9881C_SWITCH_PAGE,	\
@@ -84,7 +91,7 @@ struct ili9881c_instr {
         },					\
     }
 
-static const struct ili9881c_instr ili9881c_init[] = {
+static const struct ili9881c_instr kd050hdfia020_init[] = {
     ILI9881C_SWITCH_PAGE_INSTR(3),
     ILI9881C_COMMAND_INSTR(0x01, 0x00),
     ILI9881C_COMMAND_INSTR(0x02, 0x00),
@@ -351,8 +358,8 @@ static int ili9881c_enable(struct drm_panel *panel)
 
     dsi->mode_flags |= MIPI_DSI_MODE_LPM;
 
-    for (i = 0; i < ARRAY_SIZE(ili9881c_init); i++) {
-        const struct ili9881c_instr *instr = &ili9881c_init[i];
+    for (i = 0; i < ctx->desc->init_length; i++) {
+        const struct ili9881c_instr *instr = &ctx->desc->init[i];
 
         if (instr->op == ILI9881C_SWITCH_PAGE)
             ret = ili9881c_switch_page(ctx, instr->arg.page);
@@ -446,10 +453,10 @@ static int ili9881c_prepare(struct drm_panel *panel)
         return ret;
 
     /* And reset it */
-    gpio_set_value_cansleep(ctx->rst_gpio, 0);
+    gpiod_set_value_cansleep(ctx->reset, 1);
     msleep(120);
 
-    gpio_set_value_cansleep(ctx->rst_gpio, 1);
+    gpiod_set_value_cansleep(ctx->reset, 0);
     msleep(120);
 
     ctx->prepared = true;
@@ -491,16 +498,15 @@ static int ili9881c_unprepare(struct drm_panel *panel)
 
     mipi_dsi_dcs_enter_sleep_mode(ctx->dsi);
     regulator_disable(ctx->power);
-    gpio_set_value_cansleep(ctx->rst_gpio, 0);
+    gpiod_set_value_cansleep(ctx->reset, 0);
 
     ctx->prepared = false;
 
     return 0;
 }
 
-static const struct drm_display_mode bananapi_default_mode = {
+static const struct drm_display_mode kd050hdfia020_default_mode = {
     .clock	= PCLOCK,
-    .vrefresh	= 60,
 
     .hdisplay	= LCD_XSIZE_TFT,
     .hsync_start= LCD_XSIZE_TFT + LCD_HFPD,
@@ -511,40 +517,42 @@ static const struct drm_display_mode bananapi_default_mode = {
     .vsync_start= LCD_YSIZE_TFT + LCD_VFPD,
     .vsync_end	= LCD_YSIZE_TFT + LCD_VFPD + LCD_VSPW,
     .vtotal	= LCD_YSIZE_TFT + LCD_VFPD + LCD_VSPW + LCD_VBPD,
+
+    .width_mm = SCREEN_WIDTH,
+    .height_mm = SCREEN_HEIGHT,
 };
 
-static int ili9881c_get_modes(struct drm_panel *panel)
+static int ili9881c_get_modes(struct drm_panel *panel,
+				  struct drm_connector *connector)
 {
-    struct drm_connector *connector = panel->connector;
-    struct ili9881c *ctx = panel_to_ili9881c(panel);
-    struct drm_display_mode *mode;
-    int ret;
-
-    mode = drm_mode_duplicate(panel->drm, &bananapi_default_mode);
-    if (!mode) {
-        dev_err(&ctx->dsi->dev, "failed to add mode %ux%ux@%u\n",
-            bananapi_default_mode.hdisplay,
-            bananapi_default_mode.vdisplay,
-            bananapi_default_mode.vrefresh);
-        return -ENOMEM;
-    }
-
-    drm_mode_set_name(mode);
-
-    panel->connector->display_info.width_mm = 62;
-    panel->connector->display_info.height_mm = 110;
-
-    dev_dbg(&ctx->dsi->dev, "calling bus format set function ili9881c\n");
-    connector->display_info.bus_flags = DRM_BUS_FLAG_DE_LOW | DRM_BUS_FLAG_PIXDATA_NEGEDGE;
-    ret = drm_display_info_set_bus_formats(&panel->connector->display_info,
-                    ili_bus_formats, ARRAY_SIZE(ili_bus_formats));
-    if (ret)
-        return -EINVAL;
-
-    mode->type = DRM_MODE_TYPE_DRIVER | DRM_MODE_TYPE_PREFERRED;
-    drm_mode_probed_add(connector, mode);
-
-    return 1;
+	struct ili9881c *ctx = panel_to_ili9881c(panel);
+	struct drm_display_mode *mode;
+	int ret;
+
+	mode = drm_mode_duplicate(connector->dev, ctx->desc->mode);
+	if (!mode) {
+		dev_err(&ctx->dsi->dev, "failed to add mode %ux%ux@%u\n",
+			ctx->desc->mode->hdisplay,
+			ctx->desc->mode->vdisplay,
+			drm_mode_vrefresh(ctx->desc->mode));
+		return -ENOMEM;
+	}
+
+	drm_mode_set_name(mode);
+
+	connector->display_info.bus_flags = DRM_BUS_FLAG_DE_LOW | DRM_BUS_FLAG_PIXDATA_SAMPLE_NEGEDGE;
+	ret = drm_display_info_set_bus_formats(&connector->display_info,
+			ili_bus_formats, ARRAY_SIZE(ili_bus_formats));
+	if (ret)
+	return -EINVAL;
+
+	mode->type = DRM_MODE_TYPE_DRIVER | DRM_MODE_TYPE_PREFERRED;
+	drm_mode_probed_add(connector, mode);
+
+	connector->display_info.width_mm = mode->width_mm;
+	connector->display_info.height_mm = mode->height_mm;
+
+	return 1;
 }
 
 static const struct drm_panel_funcs ili9881c_funcs = {
@@ -557,7 +565,6 @@ static const struct drm_panel_funcs ili9881c_funcs = {
 
 static int ili9881c_dsi_probe(struct mipi_dsi_device *dsi)
 {
-    struct device_node *np;
     struct ili9881c *ctx;
     int ret;
 	int lanes = 4;
@@ -567,10 +574,10 @@ static int ili9881c_dsi_probe(struct mipi_dsi_device *dsi)
         return -ENOMEM;
     mipi_dsi_set_drvdata(dsi, ctx);
     ctx->dsi = dsi;
+    ctx->desc = of_device_get_match_data(&dsi->dev);
 
-    drm_panel_init(&ctx->panel);
-    ctx->panel.dev = &dsi->dev;
-    ctx->panel.funcs = &ili9881c_funcs;
+    drm_panel_init(&ctx->panel, &dsi->dev, &ili9881c_funcs,
+        DRM_MODE_CONNECTOR_DSI);
 
     ctx->power = devm_regulator_get(&dsi->dev, "power");
     if (IS_ERR(ctx->power)) {
@@ -578,33 +585,18 @@ static int ili9881c_dsi_probe(struct mipi_dsi_device *dsi)
         return PTR_ERR(ctx->power);
     }
 
-    ctx->rst_gpio = of_get_named_gpio(dsi->dev.of_node, "reset-gpio", 0);
-    if (!gpio_is_valid(ctx->rst_gpio)) {
-        dev_err(&dsi->dev, "Couldn't get panel reset pin available 0\n");
-        return -EINVAL;
+    ctx->reset = devm_gpiod_get(&dsi->dev, "reset", GPIOD_OUT_LOW);
+    if (IS_ERR(ctx->reset)) {
+        dev_err(&dsi->dev, "Couldn't get our reset GPIO\n");
+        return PTR_ERR(ctx->reset);
     }
 
-    ret = devm_gpio_request_one(&dsi->dev, ctx->rst_gpio,
-                GPIOF_OUT_INIT_LOW, "ili_reset");
-
-    if (ret < 0) {
-        dev_err(&dsi->dev, "Couldn't get panel reset pin available 1\n");
+    ret = drm_panel_of_backlight(&ctx->panel);
+    if (ret)
         return ret;
-    }
-
-    np = of_parse_phandle(dsi->dev.of_node, "backlight", 0);
-    if (np) {
-        ctx->backlight = of_find_backlight_by_node(np);
-        of_node_put(np);
-
-        if (!ctx->backlight)
-            return -EPROBE_DEFER;
-    }
 
     of_property_read_u32(dsi->dev.of_node, "dsi-lanes", &lanes);
-    ret = drm_panel_add(&ctx->panel);
-    if (ret < 0)
-        return ret;
+    drm_panel_add(&ctx->panel);
 
     dsi->mode_flags = MIPI_DSI_MODE_VIDEO_SYNC_PULSE;
     dsi->mode_flags |= MIPI_DSI_MODE_VIDEO;
@@ -621,14 +613,17 @@ static int ili9881c_dsi_remove(struct mipi_dsi_device *dsi)
     mipi_dsi_detach(dsi);
     drm_panel_remove(&ctx->panel);
 
-    if (ctx->backlight)
-        put_device(&ctx->backlight->dev);
-
     return 0;
 }
 
+static const struct ili9881c_desc ili9881c_desc = {
+	.init = kd050hdfia020_init,
+	.init_length = ARRAY_SIZE(kd050hdfia020_init),
+	.mode = &kd050hdfia020_default_mode,
+};
+
 static const struct of_device_id ili9881c_of_match[] = {
-    { .compatible = "startek,kd050hdfia020" },
+    { .compatible = "startek,kd050hdfia020", .data = &ili9881c_desc},
     { }
 };
 MODULE_DEVICE_TABLE(of, ili9881c_of_match);
-- 
2.17.1

